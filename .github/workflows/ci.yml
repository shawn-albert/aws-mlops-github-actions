name: CI Workflow

on:
  push:
    branches:
      - main
      - develop

jobs:
  # Release job to handle semantic versioning
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      # Retrieve secrets and parameters from AWS
      - name: Retrieve secrets and parameters from AWS
        run: |
          echo "GITHUB_TOKEN=$(aws ssm get-parameter --name /path/to/github_token --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "AWS_REGION=$(aws ssm get-parameter --name /path/to/aws_region --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_MAIN=$(aws ssm get-parameter --name /path/to/ecr_repository_main --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_DEVELOP=$(aws ssm get-parameter --name /path/to/ecr_repository_develop --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Semantic Release to determine the new version and create a GitHub release
      - name: Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

  # Build job to build and test the project within a Docker container
  build:
    needs: release # Depends on the release job
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
        branch: [main, develop]

    # Container configuration to run the job within a Docker container
    container:
      image: ${{ env.AWS_REGION }}.dkr.ecr.amazonaws.com/${{ env['ECR_REPOSITORY_' + matrix.branch] }}:${{ github.event.release.tag_name }}
      credentials:
        username: ${{ env.AWS_ACCESS_KEY_ID }}
        password: ${{ env.AWS_SECRET_ACCESS_KEY }}
      env:
        NODE_ENV: development

    steps:
      # Checkout code and setup Python with poetry
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      # Install dependencies and run tests
      - run: poetry install
      - run: poetry run pytest

      # Push the Docker image to the ECR repository
      - name: Push Docker image to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_REGION }}.dkr.ecr.amazonaws.com
          docker tag ${{ github.event.repository.name }}-${{ matrix.branch }}:${{ github.event.release.tag_name }} ${{ env.AWS_REGION }}.dkr.ecr.amazonaws.com/${{ env['ECR_REPOSITORY_' + matrix.branch] }}:${{ github.event.release.tag_name }}
          docker push ${{ env.AWS_REGION }}.dkr.ecr.amazonaws.com/${{ env['ECR_REPOSITORY_' + matrix.branch] }}:${{ github.event.release.tag_name }}
          
